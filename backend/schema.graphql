### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type LikedTweet {
  createdAt: DateTime!
  id: String!
  tweet: Tweet
  user: User
}

input LikedTweetWhereUniqueInput {
  id: String
}

type Mutation {
  createComment(content: String, id: String): Reply
  createProfile(avatar: String, bio: String, id: String, location: String, name: String, website: String): Profile
  createReply(content: String, id: String, replyId: String): Reply
  createTweet(content: String): Tweet
  deleteLike(id: String): LikedTweet
  likedTweet(id: String): LikedTweet
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, password: String!): AuthPayload
  updateProfile(avatar: String, bio: String, id: String, location: String, name: String, website: String): Profile
}

type Profile {
  avatar: String
  bio: String
  id: String!
  location: String
  name: String
  user: User
  website: String
}

input ProfileWhereUniqueInput {
  id: String
  userId: String
}

type Query {
  allUsers: [User!]!
  me: User
  tweet(id: String): Tweet!
  tweets: [Tweet!]!
}

type Reply {
  content: String
  createdAt: DateTime!
  id: String!
  replies: Reply
  reply(after: ReplyWhereUniqueInput, before: ReplyWhereUniqueInput, first: Int, last: Int): [Reply!]!
  replyId: String
  tweet: Tweet
  updatedAt: DateTime!
  user: User
}

input ReplyWhereUniqueInput {
  id: String
}

type Tweet {
  author: User
  content: String
  createdAt: DateTime!
  id: String!
  likes(after: LikedTweetWhereUniqueInput, before: LikedTweetWhereUniqueInput, first: Int, last: Int): [LikedTweet!]!
  replies(after: ReplyWhereUniqueInput, before: ReplyWhereUniqueInput, first: Int, last: Int): [Reply!]!
  updatedAt: DateTime!
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  likedTweets(after: LikedTweetWhereUniqueInput, before: LikedTweetWhereUniqueInput, first: Int, last: Int): [LikedTweet!]!
  profile(after: ProfileWhereUniqueInput, before: ProfileWhereUniqueInput, first: Int, last: Int): [Profile!]!
  replies(after: ReplyWhereUniqueInput, before: ReplyWhereUniqueInput, first: Int, last: Int): [Reply!]!
  tweets: [Tweet!]!
  updatedAt: DateTime!
}
